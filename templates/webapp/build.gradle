buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-cargo-plugin:2.2.3'
    }
}

apply plugin: 'war'
apply plugin: 'com.bmuschko.cargo'

defaultTasks 'clean', 'build'

description = '${projectDescription}'
group = '${projectGroup}'
version = '${projectVersion}'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
}

compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

def dateTimeFormat = java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
def buildDate = java.time.LocalDateTime.now()

war {
    archiveName 'webapp-project.war'
    manifest {
        attributes(
                "Name": project.name,
                "Version": project.version,
                "Build-Date": dateTimeFormat.format(buildDate)
        )
    }
}

ext.libs = [
        jee        : "javax:javaee-api:7.0",
        junit      : "junit:junit:4.12",
        mockito    : "org.mockito:mockito-core:2.3.0",
        loggingAPI : [
                "org.slf4j:slf4j-api:1.7.22"
        ],
        loggingImpl: [
                "org.slf4j:jcl-over-slf4j:1.7.22",
                "org.slf4j:jul-to-slf4j:1.7.22",
                "ch.qos.logback:logback-classic:1.1.8"
        ],
        jaxb       : [
                "com.fasterxml.jackson.core:jackson-databind:2.8.5",
                "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:2.8.5"
        ],
        jaxrs      : [
                "javax.ws.rs:javax.ws.rs-api:2.0.1",
                "org.glassfish:javax.json:1.0.4",
                "org.glassfish.jersey.containers:jersey-container-servlet:2.25",
                "org.glassfish.jersey.media:jersey-media-json-jackson:2.25"
        ]
]

dependencies {
    def cargoVersion = '1.6.7'
    cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion", "org.codehaus.cargo:cargo-ant:$cargoVersion"

    providedCompile libs.jee
    compile libs.jaxrs
    compile libs.jaxb
    compile libs.loggingAPI
    runtime libs.loggingImpl

    testCompile libs.junit
    testCompile libs.mockito
}

cargo {

    containerId = 'tomcat9x'
    port = Integer.valueOf(project.property('tomcat.port'))

    deployable {
        context = 'test'
    }

    remote {
        hostname = project.property('tomcat.host')
        username = project.property('tomcat.user')
        password = project.property('tomcat.password')
        containerProperties {
            property 'cargo.tomcat.ajp.port', 9099
        }
    }
}