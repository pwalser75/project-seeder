defaultTasks 'clean', 'build', 'install'

buildscript {
    repositories {
		jcenter()
		mavenLocal()
		mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.0.RELEASE")
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.20.0'
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.github.ben-manes.versions'

description = '${projectDescription}'
group = '${projectGroup}'
version = '${projectVersion}'

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
}

java {
	sourceCompatibility JavaVersion.VERSION_1_8
	targetCompatibility JavaVersion.VERSION_1_8
}

jar { duplicatesStrategy = 'exclude' }

compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

def dateTimeFormat = java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
def buildDate = java.time.LocalDateTime.now()

jar {
    manifest {
        attributes(
                "Name": project.name,
                "Version": project.version,
                "Build-Date": dateTimeFormat.format(buildDate)
        )
    }
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

ext {

    junitVersion = '4.12'
    mockitoVersion = '2.23.4'
    springVersion = '2.1.1.RELEASE'
    h2Version = '1.4.197'
    swaggerVersion = '2.9.2'
	jacksonVersion = '2.27'

	libs = [
        testbase      : [
                "junit:junit:${junitVersion}",
                "org.mockito:mockito-core:${mockitoVersion}"
        ],
        springBoot    : [
                "org.springframework.boot:spring-boot-starter-data-jpa:${springVersion}",
                "org.springframework.boot:spring-boot-starter-web:${springVersion}",
                "org.springframework.boot:spring-boot-starter-actuator:${springVersion}"
        ],
        springBootTest: [
                "org.springframework.boot:spring-boot-starter-test:${springVersion}"
        ],
        h2Database    : [
                "com.h2database:h2:${h2Version}"
        ],
        swagger       : [
                "io.springfox:springfox-swagger2:${swaggerVersion}",
                "io.springfox:springfox-swagger-ui:${swaggerVersion}"
        ],
        jaxrsClient   : [
                "org.glassfish.jersey.core:jersey-client:${jacksonVersion}",
                "org.glassfish.jersey.media:jersey-media-json-jackson:${jacksonVersion}",
                "org.glassfish.jersey.inject:jersey-hk2:${jacksonVersion}"
        ]
	]
}

dependencies {
    compile libs.springBoot
    compile libs.swagger
	
    testCompile libs.testbase
    testCompile libs.springBootTest
    testCompile libs.jaxrsClient
	
    runtime libs.h2Database
}
